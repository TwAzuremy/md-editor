@use "sass:map";

$direction-map: (
        top: bottom,
        bottom: top,
        left: right,
        right: left
);

$axis-center: (
        X: (position: top, translate: Y),
        Y: (position: left, translate: X)
);

/// Reverses a direction.
///
/// @param $direction - The direction to reverse.
///
/// @return - The reversed direction.
///
/// @example
/// reverse-direction(top) => bottom
/// reverse-direction(left) => right
/// reverse-direction(center) => center
///
/// @error - Invalid direction `$direction`. Expected one of: #{map-keys($direction-map)}
@function reverse-direction($direction) {
    @if $direction == center {
        @return center;
    }

    @if not map.has-key($direction-map, $direction) {
        @error "Invalid direction `#{$direction}`. Expected one of: #{map-keys($direction-map)}";
    }

    @return map.get($direction-map, $direction);
}

/// Gets the axis of a direction.
///
/// @param $direction - The direction to get the axis from.
///
/// @return - The axis of the direction.
///
/// @example
/// axis(top) => Y
/// axis(left) => X
@function axis($direction) {
    @if $direction == "top" or $direction == "bottom" {
        @return Y;
    }

    @if $direction == "left" or $direction == "right" {
        @return X;
    }
}

@mixin transform-center($axis, $transform-attributes: null, $need-direction: true) {
    $config: map.get($axis-center, $axis);

    @if $need-direction {
        #{map.get($config, position)}: 50%;
    }
    transform: translate#{map.get($config, translate)}(-50%) $transform-attributes;
}

@mixin shadow($direction: bottom) {
    @if not map.has-key($direction-map, $direction) {
        @error "Invalid direction `#{$direction}`. Expected one of: #{map-keys($direction-map)}";
    }

    $x: 0px;
    $y: 2px;

    $shadow-map: (
            top: $x 0-$y,
            bottom: $x $y,
            left: 0-$y $x,
            right: $y $x
    );

    box-shadow: map.get($shadow-map, $direction) 8px var(--ui-color-shadow);
}

@mixin transparency-background($background, $opacity: 1, $z-index: 0) {
    &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;

        background: $background;
        opacity: $opacity;

        z-index: $z-index;
    }
}

@mixin force-lock-size($size) {
    min-width: $size;
    width: $size;
    max-width: $size;

    min-height: $size;
    height: $size;
    max-height: $size;
}

@mixin scroll-bar($hiddenHorizontal: false) {
    --scrollbar-depth: 4px;

    &::-webkit-scrollbar {
        width: var(--scrollbar-depth);
        height: var(--scrollbar-depth);
    }

    &::-webkit-scrollbar-track {
        background: transparent;
    }

    &::-webkit-scrollbar-thumb {
        background: var(--ui-color-accent-color);
        border-radius: calc(var(--scrollbar-depth) / 2);
    }

    &::-webkit-scrollbar-corner {
        background: transparent;
    }

    @if $hiddenHorizontal {
        &::-webkit-scrollbar-thumb:horizontal {
            visibility: hidden;
        }

        &:hover::-webkit-scrollbar-thumb:horizontal {
            visibility: visible;
        }
    }
}